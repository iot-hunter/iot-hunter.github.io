<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[yolov3-训练自己的数据集]]></title>
    <url>%2F2018%2F07%2F05%2Fyolov3-%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86%2F</url>
    <content type="text"><![CDATA[== 博文参考链接： https://blog.csdn.net/lilai619/article/details/79695109 #f3081a== 数据集制作图片收集从网络收集图片，通过脚本统一修改文件名，然后使用labelImg进行标注即可，因为在Linux系统中文件命中若包含中文、特殊字符会导致生成TXT文件时或者训练时出现难以预料的错误。重命名脚本如下：dataset.py123456# 指定文件夹目录image_dir = 'E:/test/'# 指定输出文件夹save_dir = 'E:/output/'# 指定新文件名前缀new_name = 'test_' rename.py1234567891011import osimport datasetimport shutilimage_dir = dataset.image_dirsave_dir = dataset.save_dirnew_name = dataset.new_nameos.chdir(dataset.image_dir)files = os.listdir()for i in range(0, len(files), 1): os.rename(image_dir + files[i], save_dir + new_name + str(i) + '.' + str(files[i]).split('.')[-1]) 制作VOC格式数据集从网上下载LabelImg可执行文件，进行图片标注即可，LabelImg使用具体请参考网络。 注意： **1. labelimg windows版本解压即可使用。 修改data文件下的 predefined_classes.txt，添加自己需要的类。 图像路径不能有中文。图片标记好后，将图片和xml上传到服务器即可。 ==图片文件夹改名为JPEGImagesXML文件夹修改问Annotations==**上传后文件夹结构最好如下图所示，其中test改为自己项目名称或者自定义即可原因为采用此种文件层级形式，在使用其他框架如caffe-ssd Faster-RCNN 时生成数据集时都是通用，无需修改官方自带生成数据集脚本文件即可使用，较为方便快捷，如果自己的文件夹架构，则需修改相应脚本文件。在VOC2007文件夹下添加如下文件即目录结构为如下图所示create_ImageSets.py 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#!/usr/bin/env python# encoding:utf-8import osimport sysimport randomimport glob# 测试集test, 总数据的50%# 训练和验证集train_val, 除去测试的剩余50%# trainval中训练部分train, trainval的50%# trainval中验证集val, trainval的50%&quot;&quot;&quot;try: test_percent = int(sys.argv[1]) train_percent = int(sys.argv[2])except: print &apos;Please input picture range&apos; print &apos;/createTest.py test_number&apos; os._exit(0)&quot;&quot;&quot;IMAGE_SETS_PATH = &apos;ImageSets&apos;MAIN_PATH = &apos;ImageSets/Main&apos;XML_FILE_PATH = &apos;Annotations&apos;JPEGImages_PATH = &apos;JPEGImages&apos;test_percent = 0.66 #test样本占所有样本的百分比train_percent = 1.0 #train样本占train+val样本的百分比# 创建ImageSets数据集if not os.path.exists(IMAGE_SETS_PATH): os.mkdir(IMAGE_SETS_PATH) os.mkdir(MAIN_PATH)else: if not os.path.exists(MAIN_PATH): os.mkdir(MAIN_PATH)img_list = os.listdir(JPEGImages_PATH)numOfImg = len(img_list)test_number = int(numOfImg*test_percent)trainval_number = numOfImg - test_numbertrain_number = int(trainval_number*train_percent)all_id = range(numOfImg)test_id = sorted(random.sample(all_id, test_number))trainval_id = list(set(all_id).difference(set(test_id)))train_id = sorted(random.sample(trainval_id, train_number))val_id = list( set(trainval_id).difference(set(train_id)))trainFile = open(os.path.join(MAIN_PATH,&apos;train.txt&apos;),&apos;w&apos;)valFile = open(os.path.join(MAIN_PATH,&apos;val.txt&apos;),&apos;w&apos;)trainvalFile = open(os.path.join(MAIN_PATH,&apos;trainval.txt&apos;),&apos;w&apos;)testFile = open(os.path.join(MAIN_PATH,&apos;test.txt&apos;),&apos;w&apos;)#totalFileCount = sum([len(files) for root, dirs, files in os.walk(path)])for i in range(numOfImg): if i in test_id: testFile.write(img_list[i].split(&apos;.&apos;)[0]+&apos;\n&apos;) else: trainvalFile.write(img_list[i].split(&apos;.&apos;)[0]+&apos;\n&apos;) if i in train_id: trainFile.write(img_list[i].split(&apos;.&apos;)[0]+&apos;\n&apos;) else: valFile.write(img_list[i].split(&apos;.&apos;)[0]+&apos;\n&apos;)trainFile.close()testFile.close()trainvalFile.close()valFile.close() 之后执行1$ python create_ImageSets.py 即可，正常运行后即可在VOC2007文件夹下看到ImageSets文件夹。ImageSets文件结构如下 至此，VOC数据集准备完成 yolov3 训练1 链接数据集文件 在yolo-v3文件夹下创建自己的项目目录，目录命名可以以项目命名 如 test 227yolov3地址为 12345/home/dl/yolo/yolo-v3/darknet``` 项目文件夹```shell/home/dl/yolo/yolo-v3/darknet/test 创建数据集快捷方式，目的是为了数据集同一放置，而且可以供多用户多框架使用，不至于太混乱 123cd /home/dl/yolo/yolo-v3/darknetcd testln -s /home/dl/data/test/VOCdevkit2007/VOC2007 VOC2007 2 生成数据集文件txt 1cp ./tools/voc_label.py . 复制后的文件结构如下 修改voc_label.py 如此次训练为两个类，”up” 和”down”,则修改为 1classes=[&quot;up&quot;,&quot;down&quot;] 使得classes的值为自己的标签 然后执行生成即可 1python voc_label.py 执行完成后可以看到目录下面有如下文件，其中主要的为train.txt test.txt 3 复制和创建配置文件 123cp ./cfg/yolov3-voc.cfg test_train.cfg cp ./cfg/voc.data test_voc.datatouch test_voc.names 修改配置文件names文件修改 修改test_voc.names文件内容为训练的类别内容，如此次训练为两个类，”up” 和”down”,则修改为如下图所示即可 data文件修改 classes 值修改为类别总数，不用包含背景，如此次训练为两个类，”up” 和”down”,则修改为2 train 修改为刚刚生成的train.txt全路径 test 修改为刚刚生成的test.txt全路径 backup 指定输出文件夹，可以全路径或者相对路径，但是一定要确保文件夹存在配置好后如下图所示 cfg文件夹修改 修改batch和subdivisions 根据自己的显存情况，一般8g 640*480 改成32 16 即可，具体没有测试，训练的参数一般为batch=32 subdivisions=16 测试使用的为同一cfg文件，但是batch和subdivisions都要改为1 即batch=1 subdivisions=1 width = 640 修改为自己图片的宽 height = 480 修改为自己图片的高 修改classe和fillter值，此cfg文件总共需要修改三次 classes值为类别总数，如此例子包含”up” “down”两类，即classes=2 fillter= (num/3)*(classes + 1 + 4 ) 综上 num=9 时 classes = 2 fillter= 21 注意 每层根据num来计算 第一处 第二处 第三处 至此配置文件修改完成 训练初次训练回到yolov3的编译目录，即有darknet可执行文件的目录本例为/home/dl/yolo/yolo-v3/darknet 执行12cd /home/dl/yolo/yolo-v3/darknet/darknet detector train test/test_voc.data test/test_train.cfg darknet53.conv.74 参数解释:其中.data .data 文件为前面自己配置好的test_voc.data 可以决定路径或者相对路径输入，上面使用相对路径输入 cfg也为前面修改好的cfg文件 可以决定路径或者相对路径输入，上面使用相对路径输入 darknet53.conv.74 为官网预训练模型，可以使用预训练模型，也可以不使用。 可以决定路径或者相对路径输入，上面使用相对路径输入训练后效果图 如果全为None则前面步骤存在问题，需要检查上述步骤是否出现问题，或者出现遗漏。 继续上次训练1/darknet detector train test/test_voc.data test/test_train.cfg test/out/yolov3_test_train.backup 参数解释:其中.data .data 文件为前面自己配置好的test_voc.data 可以决定路径或者相对路径输入，上面使用相对路径输入 cfg也为前面修改好的cfg文件 可以决定路径或者相对路径输入，上面使用相对路径输入-test/out/yolov3_test_train.backup 为上次训的checkpoint，有此参数可以继续上一次训练，没有则从0开始训练，具体路径在.data文件指定的backup文件夹里面。 可以决定路径或者相对路径输入，上面使用相对路径输入测试复制测试文件复制训练所用到的cfg文件1cp test/test_train.cfg test/test_test.cfg 将batch和subdivisions都要改为1 即batch=1 subdivisions=1，如下图所示 执行测试回到yolov3的编译目录，即有darknet可执行文件的目录本例为/home/dl/yolo/yolo-v3/darknet 相机实时测试执行12cd /home/dl/yolo/yolo-v3/darknet/darknet detector demo test/test_voc.data test/test_test.cfg test/out/test_10000.weights 参数解释: .data 文件为前面自己配置好的test_voc.data 可以决定路径或者相对路径输入，上面使用相对路径输入 cfg也为前面修改好的cfg文件 可以决定路径或者相对路径输入，上面使用相对路径输入 test/out/test_10000.weights 为训练后生成权重文件，具体目录在data文件中指定的路径下面。可以决定路径或者相对路径输入，上面使用相对路径输入 图片执行 1/darknet detector test test/test_voc.data test/test_test.cfg test/out/test_10000.weights data/test.jpg 参数解释: .data 文件为前面自己配置好的test_voc.data 可以决定路径或者相对路径输入，上面使用相对路径输入 cfg也为前面修改好的cfg文件 可以决定路径或者相对路径输入，上面使用相对路径输入 test/out/test_10000.weights 为训练后生成权重文件，具体目录在data文件中指定的路径下面。的可以决定路径或者相对路径输入，上面使用相对路径输入 data/test.jpg 为需要测试的图片。可以决定路径或者相对路径输入，上面使用相对路径输入]]></content>
      <categories>
        <category>深度学习</category>
        <category>yolo</category>
        <category>yolov3</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>yolo</tag>
        <tag>yolov3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
